O que é git + github
<projeto>
<projeto(alterado1)>

controle de versões 
se houver alterações temos um conflito
git serve para controlar a versão
merge -> escolhe qual codigo deve ser mantido


git hub -> local para armazenar o codigo versionado pelo git

git init -> inicia o controle de versão

git status -> mostra o status {
no commit yet -> não foi feita nenhuma versão de codigo
untracked files -> arquivos que não foram adicionados
}

incluir arquivo ao controle de versão
- git add "nome arquivo.<extensao>" -> adiciona o arquivo informado
- git add . -> adiciona todos os arquivos alterados


criando versões do codigo com commit
git commit -m "m de mensagem" -> commita uma nova versão

enviando alterações usando o git push
git push -> enviar para servidor da nuvem{
tem que definir para onde vai ser enviado, criar repositorio na nuvem (github)
-copiar link do repositorio:
ex: https://github.com/Giovanna092/projeto1-dev-aprender

git remote add origin <link do repositorio> -> definir para onde o codigo sera enviado
git push ele recomenda o codigo abaixo
git push --set-upstream origin master -> manda para o repositorio na nuvem
aparecerá diversas informações na tela, informando que o projeto foi adicionado

voltando para o projeto no github, aparecerá uma mensagem informando que a branch master recebeu uma atualização
entrando na branch pelo site mesmo poderá ser visto todos os arquivos que foram enviados


Clonando repositorio e selecionando uma branch especifica
para clonar um repositorio usamos:
git clone <url do repositorio remoto>
assim é clonado o branch e o head remoto, geralmente main, ou master

para clonar uma branch especifica usamos:
git clone -b <branchname> <url do repositorio remoto>


verificar historico de versoes
git reflog -> mostra as versoes que foram adicionadas até o momento
(é exibido em estilo de pilha, ultimo no topo)
é exibido o id da versão (util para transitar entre versões) 
a branch e o commit com sua mensagem personalizada


voltar versao anterior (localmente)
git reset --hard <id da versao>


o que são branchs e como criar uma
branchs -> caminhos diferentes que voce vai seguir durante o versionamento do codigo

comando para mostrar quais branchs estão disponiveis no momento: 
git branch
info adicional
a branch que esta marcada com * e esta verde é a que estamos utilizando no momento

adicionar nova branch:
adicionar um <nome> para a branch no comando.. ex: git branch staging

para mudar de branch: 
git checkout <nomeBranch>.. ex: git checkout staging -> agora a branch staging ficara marcada com * e com a cor da fonte verde

agora toda modificacao que voce fizer ira para a branch atual

lembrando... 
quando voce cria uma branch nova, e voce precisar subi la para a nuvem
execute o comando: 
git push --set-upstream origin <nomebranch>


como trazer atualizacoes de uma branch para a branch principal?
utilizando merge

unir codigo com a branch principal:
entrar na branch principal
ex: git checkout master

antes de fazer o merge:
na branch principal execute:
git pull  -> tras atualizacoes do servidor para a maquina local

apos isso:
git merge <nome da branch que para puxar as atualizacoes>
ex: git merge staging

outra forma de fazer:
criar nova branch
git checkout -b <nomebranch>
ex: git checkout -b sistema-de-login


